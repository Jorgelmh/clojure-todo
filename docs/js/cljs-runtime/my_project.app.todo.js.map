{"version":3,"sources":["my_project/app/todo.cljs"],"mappings":"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","names":["my-project.app.todo/todo-categories","my-project.app.todo/counter","reagent.core.atom","my-project.app.todo/get-status-color","status","cljs.core._EQ_","my-project.app.todo/add-new-todo","todos","new-todo","id","cljs.core.swap_BANG_","cljs.core/inc","cljs.core.assoc","my-project.app.todo/todo-detail-validations","cljs.core/not-empty","my-project.app.todo/validate-inputs","to-validate","cljs.core.reduce","errors","validation","vec__29425","cljs.core.nth","fieldname","validations","value","cljs.core.get","no-error","fexpr__29428","my-project.app.todo/format-error-message","clojure.string.join","p1__29429#","cljs.core.map","cljs.core/second","my-project.app.todo/todo-form","todo-list","name","category","cljs.core/deref","p1__29430#","p1__29431#","cljs.core/reset!","iter__4529__auto__","s__29433","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__29435","cljs.core/chunk-buffer","i__29434","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__29432","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","item","js/alert","p__29437","map__29438","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","p1__29436#","my-project.app.todo/todo-item","on-delete","on-status-change","G__29440","my-project.app.todo/todo-iter","s__29444","b__29446","i__29445","p1__29442#","iter__29443","p1__29441#","cljs.core/dissoc","cljs.core/update","cljs.core/assoc","my-project.app.todo/todo-app","cljs.core/chunk-first"],"sourcesContent":["(ns my-project.app.todo\r\n  (:require\r\n   [reagent.core :as r]\r\n   [clojure.string :refer [join]]))\r\n\r\n(def todo-categories [\"Entertainment\" \"Work\" \"Cooking\" \"Sports\"])\r\n\r\n(def counter (r/atom 0))\r\n\r\n(defn get-status-color\r\n  \"Get Color for the current activity status\"\r\n  [status]\r\n  (cond\r\n    (= status \"To-Do\") \"paleturquoise\"\r\n    (= status \"In-Progress\") \"yellow\"\r\n    (= status \"Complete\") \"chartreuse\"))\r\n\r\n(defn add-new-todo\r\n  \"Push new To-Do\"\r\n  [todos new-todo]\r\n  (let [id (swap! counter inc)]\r\n    (assoc todos id (assoc new-todo :id id))))\r\n\r\n(def todo-detail-validations\r\n  {:name { :message \"Please provide a name\", :validation not-empty }\r\n   :category { :message \"Please provide a category\", :validation not-empty }})\r\n\r\n(defn validate-inputs\r\n  \"Check that new input meets criteria\"\r\n  [to-validate]\r\n  (reduce (fn[errors validation]\r\n            (let [[fieldname validations] validation\r\n                  value (get to-validate fieldname)\r\n                  no-error ((:validation validations) value)]\r\n              (if no-error\r\n                errors\r\n                (assoc errors fieldname (:message validations)))\r\n              )\r\n            )\r\n          {}\r\n          todo-detail-validations))\r\n\r\n(defn format-error-message\r\n  \"Get a single string with the error messages\"\r\n  [errors]\r\n  (join \", \" (map #(second %) errors)))\r\n\r\n(defn todo-form\r\n  \"Data will be input over here\"\r\n  [todo-list]\r\n  (let [name (r/atom \"\")\r\n        category (r/atom \"\")]\r\n    (fn []\r\n      [:div { :class \"todo-input-container\" }\r\n       [:h2 \"Add activity\"]\r\n       [:div.input-fields\r\n        [:input {:type \"text\"\r\n                 :value @name\r\n                 :placeholder \"Activity name\"\r\n                 :on-change #(reset! name (-> % .-target .-value))}]\r\n        [:select {:value @category :on-change #(reset! category (-> % .-target .-value))}\r\n         [:option { :disabled true, :value \"\" } \"Choose Category\"]\r\n         (for [item todo-categories]\r\n           ^{:key item} [:option {:value item} item])]\r\n        [:button.add-button {:on-click #(let [new-todo { :name @name, :category @category, :status \"To-Do\" }\r\n                                              validations (validate-inputs new-todo)]\r\n                                          (if (= (count validations) 0)\r\n                                            (do\r\n                                              (reset! todo-list (add-new-todo @todo-list new-todo))\r\n                                              (reset! category \"\")\r\n                                              (reset! name \"\"))\r\n                                            (js/alert (format-error-message validations))))}\r\n         \"Add\"]]])))\r\n\r\n(defn todo-item\r\n  [{:keys [name category status]} on-delete on-status-change]\r\n  [:li.todo-item { :style { :background-color (get-status-color status) } }\r\n   [:div.todo-details\r\n    [:p name]\r\n    [:p category]]\r\n   [:div.item-buttons\r\n    [:select {:value status, :on-change #(on-status-change (-> % .-target .-value)), :className \"activity-status-dropdown\"}\r\n     [:option {:value \"To-Do\"} \"To-Do\"]\r\n     [:option {:value \"In-Progress\"} \"In-Progress\"]\r\n     [:option {:value \"Complete\"} \"Complete\"]]\r\n    [:button.delete-activity {:on-click on-delete} \"Delete\"]\r\n    ]])\r\n\r\n(defn todo-iter\r\n  \"Renders the list\"\r\n  [todo-list]\r\n  [:div { :class \"todo-list-container\" }\r\n   [:h2 \"List of activities\"]\r\n   (if (= (count @todo-list) 0) \r\n     [:p { :style { :text-align \"center\", :margin-top \"15px\" } } \"No items added yet\" ]\r\n      [:ul \r\n       (for [item (map #(second %) @todo-list)]\r\n                                    ^{:key (:id item)}\r\n                                    [todo-item item\r\n                                     #(swap! todo-list dissoc (:id item))\r\n                                     #(swap! todo-list update (:id item) assoc :status %)])])])\r\n\r\n(defn todo-app\r\n  \"My Todo Application using clojure\"\r\n  []\r\n  (let [todo-list (r/atom {})]\r\n    (fn []\r\n      [:div.app-container\r\n       [:div.sub-container\r\n        [:h1 \"To-Do App in ClojureScript\"]\r\n        [todo-form todo-list]\r\n        [todo-iter todo-list]\r\n        [:p.status-note \"Note: Change status to see real-time color updates\"]]]\r\n      ))\r\n  )"]}